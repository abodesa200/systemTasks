// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id             Int              @id @default(autoincrement())
  name           String
  email          String           @unique
  password       String
  jobTitle       String           @default("غير محدد")
  image         String?          // الصورة (url أو path)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  role           Role             @default(USER)
  assignedTasks  TaskAssignment[]
   workTimes      WorkTime[] 
}



enum Role {
  USER
  ADMIN
  
}

model Project {
  id          Int   @id @default(autoincrement())
  name        String
  description String?
  client      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tasks Task[]
}

model Tag {
  id          Int   @id @default(autoincrement())
  name  String
  color String

  tasks Task[]
}

model Task {
  id          Int   @id @default(autoincrement())
  title           String
  description     String?
  status          String   // todo, progress, review, completed, hold
  priority        String   // low, medium, high
  progress        Int      @default(0)
  comments        Int      @default(0)
  attachments     Int      @default(0)
  dueDate         DateTime?
  estimatedHours  Int
  spentHours      Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  projectId   Int?
  project     Project?        @relation(fields: [projectId], references: [id], onDelete: SetNull)
  tags        Tag[]
  assignees   TaskAssignment[]
}

model TaskAssignment {
  id          Int   @id @default(autoincrement())
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId Int
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  @@unique([taskId, userId])
}

// model WorkTime {
//   id       Int      @id @default(autoincrement())
//   userId   Int
//   date     DateTime
//   startTime DateTime?
//   seconds  Int
//   user     User @relation(fields: [userId], references: [id])

//   @@unique([userId, date])
// }

model WorkTime {
  id        Int      @id @default(autoincrement())
  userId    Int
  date      DateTime
  startTime DateTime
  endTime   DateTime?
  seconds   Int
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, date])
  @@map("work_times")
}